import io, os, re
from datetime import datetime, timezone, timedelta

import streamlit as st
import pandas as pd
import pdfplumber
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ---------- Page ----------
st.set_page_config(page_title="Clinic Lab OCR ‚Üí Google Sheet", page_icon="üß™", layout="wide")
st.title("üß™ Fasai Medical Clinic ‚Äì Lab OCR System")

# ---------- Config / Secrets ----------
SHEET_ID = st.secrets.get("SHEET_ID", os.getenv("SHEET_ID", ""))

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
]

def get_gspread_client():
    # Streamlit Cloud ‚Üí ‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å st.secrets
    if "gcp_service_account" in st.secrets:
        creds = ServiceAccountCredentials.from_json_keyfile_dict(
            dict(st.secrets["gcp_service_account"]), SCOPES
        )
    # Local/Colab ‚Üí ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå service_account.json
    else:
        if not os.path.exists("service_account.json"):
            st.error("‚ùå Missing key: put service account in Secrets ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏á service_account.json ‡∏Ç‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ")
            st.stop()
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            "service_account.json", SCOPES
        )
    return gspread.authorize(creds)

def open_sheet(sheet_id: str):
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏£‡∏ß‡∏° Approved Date Time)"""
    gc = get_gspread_client()
    sh = gc.open_by_key(sheet_id)
    ws = sh.sheet1
    header = ws.row_values(1)
    wanted_header = ["LN", "HN", "RESULT", "TEST", "Approved Date Time"]
    if not header:
        ws.append_row(wanted_header)
    elif header != wanted_header:
        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å ‚Äú‡∏Ñ‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏î‡∏¥‡∏°‚Äù ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å
        ws.delete_rows(1)
        ws.insert_row(wanted_header, 1)
    return ws

# ---------- OCR Extractors ----------
def extract_fields(text_raw: str) -> dict:
    """‡∏î‡∏∂‡∏á LN / HN / RESULT / TEST / Approved Date Time ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° PDF"""
    # ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ regex ‡∏Ñ‡πâ‡∏ô‡∏á‡πà‡∏≤‡∏¢
    t = re.sub(r"\s+", " ", text_raw.replace("\r", " ").replace("\n", " "))

    # LN ‡πÄ‡∏ä‡πà‡∏ô: LN: 20251015-001 ‡∏´‡∏£‡∏∑‡∏≠ LN 20251015
    m_ln = re.search(r"\bLN[:\- ]+([0-9]{6,}(?:-[0-9]{1,4})?)\b", t, re.I)

    # HN ‡πÄ‡∏ä‡πà‡∏ô: H00001
    m_hn = re.search(r"\bHN[:\- ]+([A-Z]?\d{4,10})\b", t, re.I)

    # RESULT ‡πÄ‡∏ä‡πà‡∏ô Detected / Not detected / Positive / Negative / Inconclusive
    m_res = re.search(r"\b(Detected|Not\s*detected|Positive|Negative|Inconclusive)\b", t, re.I)
    if m_res:
        v = m_res.group(1).lower().replace(" ", "")
        if v in ("detected", "positive"):
            result = "Detected"
        elif v in ("notdetected", "negative"):
            result = "Not detected"
        else:
            result = "Inconclusive"
    else:
        result = "Unknown"

    # Approved Date Time ‡πÄ‡∏ä‡πà‡∏ô "Approved Date Time: 16/10/2025 09:26:21"
    # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    approved_str = ""
    m_ap = re.search(
        r"Approved\s*Date\s*Time[:\- ]+(\d{1,2}/\d{1,2}/\d{4})\s+(\d{1,2}:\d{2}(?::\d{2})?)",
        t, re.I
    )
    if m_ap:
        raw = f"{m_ap.group(1)} {m_ap.group(2)}"
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        for fmt in ("%d/%m/%Y %H:%M:%S", "%d/%m/%Y %H:%M"):
            try:
                approved_dt = datetime.strptime(raw, fmt)
                approved_str = approved_dt.strftime("%d/%m/%Y %H:%M")
                break
            except ValueError:
                continue
    # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å fallback ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏î‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
    # else:
    #     approved_str = datetime.now(timezone(timedelta(hours=7))).strftime("%d/%m/%Y %H:%M")

    return {
        "LN": m_ln.group(1) if m_ln else "",
        "HN": m_hn.group(1) if m_hn else "",
        "RESULT": result,
        "TEST": "COVID-19 (RT-PCR)",
        "Approved Date Time": approved_str,
    }

# ---------- UI ----------
st.info("Upload PDF ‚Üí Extract LN, HN, RESULT, TEST, Approved Date Time ‚Üí Save to Google Sheet")

files = st.file_uploader("üìé Upload Lab Reports (PDF)", type=["pdf"], accept_multiple_files=True)

# ‡∏£‡∏ß‡∏°‡∏ú‡∏• OCR
rows: list[dict] = []
if files:
    for f in files:
        with pdfplumber.open(io.BytesIO(f.read())) as pdf:
            text = "\n".join([(p.extract_text() or "") for p in pdf.pages])
        rec = extract_fields(text)   # ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Approved Date Time ‡∏°‡∏≤‡∏à‡∏≤‡∏Å PDF ‡πÅ‡∏•‡πâ‡∏ß
        rows.append(rec)

# ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà
st.markdown(
    f'üîó **Sheet in use:** https://docs.google.com/spreadsheets/d/{SHEET_ID}/edit',
    unsafe_allow_html=True
)

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á + ‡∏õ‡∏∏‡πà‡∏° ----------
if rows:
    df = pd.DataFrame(rows, columns=["LN", "HN", "RESULT", "TEST", "Approved Date Time"])
    st.dataframe(df, use_container_width=True)

    # ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if SHEET_ID and st.button("üíæ Save to Google Sheet", key="save_btn"):
        ws = open_sheet(SHEET_ID)
        before = len(ws.get_all_values())
        for r in rows:
            ws.append_row([r["LN"], r["HN"], r["RESULT"], r["TEST"], r["Approved Date Time"]])
        after = len(ws.get_all_values())
        st.success(f"‚úÖ Saved {after - before} rows. Now total rows (incl. header): {after}")

    # ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô/‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    if SHEET_ID and st.button("üß™ Test write & read back", key="test_btn"):
        ws = open_sheet(SHEET_ID)
        ws.append_row(["TEST-LN","TEST-HN","Detected","COVID-19 (RT-PCR)","01/01/2025 12:00"])
        values = ws.get_all_values()
        st.success(f"Rows in sheet (including header): {len(values)}")
        st.write("Last 5 rows from Google Sheet:")
        st.table(values[-5:])
else:
    st.caption("Upload PDF files to start‚Ä¶")
